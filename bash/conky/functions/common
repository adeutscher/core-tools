# Define basic colours.
colour_green=33CC33
colour_light_blue=99CCFF
colour_orange=FFA500
colour_red=D00000

# Assign colours to specific roles.
colour_local_path=$colour_green
colour_kvm=$colour_orange
colour_network=$colour_light_blue
colour_network_address=$colour_green
# Default header colour
colour_header=$colour_orange

colour_good=$colour_green
colour_warning=$colour_orange
colour_alert=$colour_red

# The directory specified by $reportRoot contains periodic scripts run by periodic-reports.sh.
# Path is relative to conky directory.
reportRoot=scripts/report-scripts

# Some scripts may need to use temporary files. Place them here.
tempRoot=/tmp/$USER/conky

# Some scripts need to reach outside of conky's directory.
# Defining the relative path to the root of the tools directory from the conky/ directory.

if [[ ! "$(pwd)" =~ ^$HOME ]] && [ -f "$tempRoot/tools-dir" ]; then
    # Script is running out of a tmpfs
    #    (not running out of home, and a temp root exists as probably created by start.sh)
    toolsRoot="$(cat "$tempRoot/tools-dir")"
else
    # Script is running out of normal location in tools.
    toolsRoot=../..
fi

# If we go to 38 characters or higher, conky will start to expand widthwise.
characterWidth=37
# Putting two phrasings in to cover an edge case in networking that I don't fully understand at the moment.
characterWidthLimit=$(($characterWidth+1))

# Defining functions here in case they need to be used in multiple scripts. #

# Look in a data file in the secure/ directory to try to resolve MAC addresses to a computer name.
# If the file doesn't exist or there is no entry, print nothing and let above logic handle it.
# Example record line (plus header):
#     owner,type,mac,label,general-location,specific-location,description,notes
#     redacted-name,Bluetooth,18:2a:7b:3d:aa:bb,WiiU Pro,Home,Bookshelf,Used for games,purchased last year
__get_mac_record(){
    if [ -n "$1" ]; then
        grep -Pim1 "^([^,]*,){2}$1," "$tempRoot/../network-index.csv" 2> /dev/null || grep -Pim1 "^([^,]*,){2}$1," $toolsRoot/secure/files/tool-data/network-index.csv 2> /dev/null | tee -a "$tempRoot/../network-index.csv"
    fi
}

# fetch description field
__get_mac_description(){
    if [ -n "$1" ]; then
        __get_mac_record "$1" | cut -d',' -f 7
    fi
}

# fetch label field
__get_mac_label(){
    if [ -n "$1" ]; then
        __get_mac_record "$1" | cut -d',' -f 4
    fi
}

# fetch general location field
__get_mac_general_location(){
    if [ -n "$1" ]; then
        __get_mac_record "$1" | cut -d',' -f 5
    fi
}

# fetch notes field
__get_mac_notes(){
    if [ -n "$1" ]; then
        __get_mac_record "$1" | cut -d',' -f 8
    fi
}

# fetch owner field
__get_mac_owner(){
    if [ -n "$1" ]; then
        __get_mac_record "$1" | cut -d',' -f 1
    fi
}

# fetch specific location field
__get_mac_specific_location(){
    if [ -n "$1" ]; then
        __get_mac_record "$1" | cut -d',' -f 6
    fi
}

# fetch type field
__get_mac_type(){
    if [ -n "$1" ]; then
        __get_mac_record "$1" | cut -d',' -f 2
    fi
}

__get_mac_vendor_inner(){
    if [ -n "$1" ] && [ -f "$toolsRoot/secure/files/tool-data/vendor-mac.psv" ]; then
        grep -im1 "^${1:0:8}" "$tempRoot/../vendor-mac.psv" 2> /dev/null ||  grep -im1 "^${1:0:8}" "$toolsRoot/secure/files/tool-data/vendor-mac.psv" | tee -a "$tempRoot/../vendor-mac.psv" 2> /dev/null
    fi
}

__get_mac_vendor(){
    __get_mac_vendor_inner "$1" | cut -d'|' -f 2
}

# Colour network addresses
colour_network_address(){
    # If the argument that we're given begins with a number,
    #   then assume that it is a valid IP address.
    # If not, then assume that it's some sort of expression of a "No Address" message.
    if [[ "${1}" =~ ^[0-9] ]]; then
        # IP Address
        printf "\${color #${colour_network_address}}${1}\$color"
    else
        # "No Address"
        printf "\${color #${colour_warning}}${1}\$color"
    fi
}
# Method for colouring network interfaces.
colour_interface(){
    if [ -n "${1}" ]; then
        case "${1}" in
        tun*|tap*|bnep*|usb*)
            # Temporary interfaces provided by software (e.g. OpenVPN, phone tethering)
            iface_colour=$colour_red
            ;;
        br*)
            # Bridges get to be special.
            # This is mostly because old-laptop's bridge is a local-only thing.
            iface_colour=$colour_local_path
            ;;
        vnet*)
            # KVM guests are also special.
            iface_colour=$colour_kvm
            ;;
        *)
            # Fall back to the generic networking colour for everything else.
            iface_colour=$colour_network
            ;;
        esac
        printf "\${color #${iface_colour}}${1}\$color\n"
    fi
}

# Method for colouring percentage numbers (Higher being good).
# Originally made for battery display.
colour_percent_desc(){
    # > 31 - Good
    # 30-11 - Warning
    # 10-0 - Alert

    if [ "${1}" -le 10 ]; then
        # Alert
        printf "\${color #${colour_alert}}${1}\$color\n"        
    elif [ "${1}" -le 30 ]; then
        # Warning
        printf "\${color #${colour_warning}}${1}\$color\n"    
    else
        # All Clear
        printf "\${color #${colour_good}}${1}\$color\n"
    fi
}

shorten_string(){
  # If the first argument is a string that is longer than the threshold, then print a shortened string and an elipsis.

  # Note: The ellipsis character is counted by the expr command as 3 characters (unicode ahoy),
  #     so the option for a custom ellipsis is gone for now.
  local ellipsis=â€¦
  local ellipsisLength=1

  # Arguments
  local threshold=${2:-30}
  local string=$1
  
  # Note: Hard-coded numbers are to account for end-of-string characters in the string variabes.
  if [ "$(expr length "$string")" -le "$threshold" ]; then
    printf "%s" "$string"
  else
    printf "%s%s" "${string:0:$(($threshold-$ellipsisLength))}" "$ellipsis"
  fi
}

# If the timeout command is available, use it. Otherwise, run the command anyways.
if type timeout 2> /dev/null >&2; then
    # This was originally added for df, which has
    #   a run time of near-instant (as all commands in conky scripts should be)
    #   or near-infinity (if it was trying to poll a network file system).
    
    # A .25s timeout should be more than enough for normal operations.
    timeout="timeout .75"
fi
